---
- name: Generate a random /24 subnet
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Generate random octets
      set_fact:
        random_octets: "{{ 254 | random }}.{{ 254 | random }}"
    - name: Display IP info
      debug:
        msg: "The generated random /24 subnet is 10.{{ random_octets }}.0/24"


- name: Wireguard deployment
  hosts: wg-host
  become: true
  gather_facts: true
  vars:
    wireguard_clients_download_dir: ./clients/
    wireguard_download_clients: true
    wireguard_out_interface: "{{ lookup('env', 'WG_OUT_INTERFACE') }}"
    wireguard_peers:
      - name: full-tunnel1
        allowed_ip: "10.{{ hostvars['localhost'].random_octets }}.101"
        publickey: "{{ lookup('env', 'PUBKEY1') }}"
      - name: full-tunnel2
        allowed_ip: "10.{{ hostvars['localhost'].random_octets }}.102"
        publickey: "{{ lookup('env', 'PUBKEY2') }}"
      - name: full-tunnel3
        allowed_ip: "10.{{ hostvars['localhost'].random_octets }}.103"
        publickey: "{{ lookup('env', 'PUBKEY3') }}"
    wireguard_peers_allowed_ips: "0.0.0.0/0"
    sysctl_overwrite:
      net.ipv4.ip_forward: 1
    wireguard_address: "10.{{ hostvars['localhost'].random_octets }}.0/24"

  tasks:

  - name: Perform steps on host
    when: ansible_facts['os_family'] == 'Debian'
    block:

      - name: Update cache and upgrade all packages on Debian server
        ansible.builtin.apt:
          name: '*'
          state: latest
          update_cache: true
          cache_valid_time: 3600
        register: apt_output
        until: apt_output is succeeded
        retries: 30
        delay: 15
        ignore_errors: yes
      - debug: var=apt_output.stdout_lines

      - name: Check if reboot required
        ansible.builtin.stat:
          path: /var/run/reboot-required
        register: reboot_required_file

      - name: Reboot the server
        ansible.builtin.reboot:
          msg: Reboot initiated by Ansible for updates
          connect_timeout: 5
          reboot_timeout: 600
          pre_reboot_delay: 0
          post_reboot_delay: 30
          test_command: uptime
        when: reboot_required_file.stat.exists == true

      - name: Remove dependencies that are no longer required
        ansible.builtin.apt:
          autoremove: true
        register: autoremove_result
        until: autoremove_result is succeeded
        retries: 20
        delay: 10
        ignore_errors: yes

      - name: Remove useless packages from the cache
        ansible.builtin.apt:
          autoclean: true
        register: autoclean_result
        until: autoclean_result is succeeded
        retries: 20
        delay: 10
        ignore_errors: yes

      - name: Harden SSHD
        ansible.builtin.import_role:
          name: devsec.hardening.ssh_hardening

      - name: Harden the OS
        ansible.builtin.import_role:
          name: devsec.hardening.os_hardening

      - name: Install and configure Fail2Ban
        ansible.builtin.import_role:
          name: robertdebock.roles.fail2ban

      - name: Run WireGuard role
        ansible.builtin.import_role:
          name: lablabs.wireguard.wireguard

      - name: Add iptables POSTROUTING rule for masquerading
        ansible.builtin.iptables:
          table: nat
          jump: MASQUERADE
          chain: POSTROUTING
          source: "{{ wireguard_address }}"
          out_interface: "{{ wireguard_out_interface }}"

      - name: Get the private key for the config file
        ansible.builtin.slurp:
          src: "/etc/wireguard/privatekey"
        register: configkey

      - name: Generate WireGuard configuration file
        ansible.builtin.template:
          src: templates/wg-server.j2
          dest: "/etc/wireguard/wg0.conf"
          mode: 0600
          force: true

      - name: Add rule for 51820 UDP
        ansible.builtin.iptables:
          chain: INPUT
          jump: ACCEPT
          action: insert
          rule_num: "1"
          protocol: udp
          destination_port: 51820
          in_interface: "{{ wireguard_out_interface }}"

      - name: Setup ipv4 IP forward
        ansible.posix.sysctl:
          name: net.ipv4.ip_forward
          value: "1"
          sysctl_set: true
          state: present
          reload: true

      - name: Install iptables-persistent
        ansible.builtin.package:
          name:
            - iptables
            - iptables-persistent
          state: present

      - name: Save current state of the firewall in system file
        community.general.iptables_state:
          state: saved
          path: /etc/iptables/rules.v4

      - name: Final reboot after everything's done
        ansible.builtin.reboot:
          msg: Final reboot after config
          connect_timeout: 5
          reboot_timeout: 600
          pre_reboot_delay: 0
          post_reboot_delay: 30
          test_command: uptime
